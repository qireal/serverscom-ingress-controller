// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/serverscom/serverscom-go-client/pkg/cloud_computing_regions.go
//
// Generated by this command:
//
//	mockgen --destination ./internal/mocks/cloud_regions_service.go --package=mocks --source ./vendor/github.com/serverscom/serverscom-go-client/pkg/cloud_computing_regions.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	serverscom "github.com/serverscom/serverscom-go-client/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudComputingRegionsService is a mock of CloudComputingRegionsService interface.
type MockCloudComputingRegionsService struct {
	ctrl     *gomock.Controller
	recorder *MockCloudComputingRegionsServiceMockRecorder
}

// MockCloudComputingRegionsServiceMockRecorder is the mock recorder for MockCloudComputingRegionsService.
type MockCloudComputingRegionsServiceMockRecorder struct {
	mock *MockCloudComputingRegionsService
}

// NewMockCloudComputingRegionsService creates a new mock instance.
func NewMockCloudComputingRegionsService(ctrl *gomock.Controller) *MockCloudComputingRegionsService {
	mock := &MockCloudComputingRegionsService{ctrl: ctrl}
	mock.recorder = &MockCloudComputingRegionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudComputingRegionsService) EXPECT() *MockCloudComputingRegionsServiceMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockCloudComputingRegionsService) Collection() serverscom.Collection[serverscom.CloudComputingRegion] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection")
	ret0, _ := ret[0].(serverscom.Collection[serverscom.CloudComputingRegion])
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockCloudComputingRegionsServiceMockRecorder) Collection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockCloudComputingRegionsService)(nil).Collection))
}

// Flavors mocks base method.
func (m *MockCloudComputingRegionsService) Flavors(regionID int64) serverscom.Collection[serverscom.CloudComputingFlavor] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavors", regionID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.CloudComputingFlavor])
	return ret0
}

// Flavors indicates an expected call of Flavors.
func (mr *MockCloudComputingRegionsServiceMockRecorder) Flavors(regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavors", reflect.TypeOf((*MockCloudComputingRegionsService)(nil).Flavors), regionID)
}

// Images mocks base method.
func (m *MockCloudComputingRegionsService) Images(regionID int64) serverscom.Collection[serverscom.CloudComputingImage] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images", regionID)
	ret0, _ := ret[0].(serverscom.Collection[serverscom.CloudComputingImage])
	return ret0
}

// Images indicates an expected call of Images.
func (mr *MockCloudComputingRegionsServiceMockRecorder) Images(regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockCloudComputingRegionsService)(nil).Images), regionID)
}
